Process runs on different context, while threads run on the same environment
    - Threads use the same resources assigned to the process
    - Execution flow is independent (meaning, different stacks and register environments)
    - Merit: + collaboration is easy
             + utilizing multi-core CPUs
    - Demerit: + bugs and errors affect to other threads

POSIX Thread:
#include <pthread.h>
int pthread_create(pthread_t* thread,
                    pthread_attr_t* attr,
                    void *(*entry) (void*),
                    void* arg);
    create a new thread, then execute function call arg

int pthread_join(pthread_t thread,
                 void** retval);
    wait for termination of thread specified by pthread_t thread
    return value of thread is stored to retval
    equi. waitpid() for process
    type of retval is void*

int pthread_detach(pthread_t thread);
    detach a thread, and let its termination unmanaged

race condition: situation where multiple threads access the same shared resource, and the final state depends on the access
execution order

mutex
#include <pthread.h>
int pthread_mutex_init(pthread_mutex_t* mutex, const pthread_mutexattr_t* attr);
    - create a new mutex and store to *mutex
    - attr can be specified as NULL (see manual for others)

int pthread_mutex_destroy(pthread_mutex_t* mutex);
    - discarding a mutex

int pthread_mutex_lock(pthread_mutex_t* mutex);
    - lock a mutex

int pthread_mutex_unlock(pthread_mutex_t* mutex);
    - release a locked mutex

conditional wait
#include <pthread.h>
int pthread_cond_init(pthread_cond_t* cond, pthread_condattr_t* attr);
    - create a new condition variable
    - attr can be NULL

int pthread_cond_destroy(pthread_cond_t* cond);
    - destroy a cond variable

int pthread_cond_wait(pthread_cond_t* cond, pthread_mutex_t* mutex);
    - wait for notification to arrive on *cond
    - require mutex lock, as shared resource is touched
    - HAS TO BE CALLED WHERE MUTEX LOCK HAS BEEN ACQUIRED
    - while waiting, mutex lock is temporarily released

int pthread_cond_broadcast(pthread_cond_t* cond);
    - notifies the *cond variable
    - MUST BE USED IN A MUTEX LOCK AS WELL

basic pattern:
- sender:
    pthread_mutex_lock(&mtx);
    /* some operations */
    pthread_cond_broadcast(&cond);
    pthread_mutex_unlock(&mtx);
- receiver:
    pthread_mutex_lock(&mtx);
    while(!condition) { // while a condition is not met
        pthread_cond_wait(&cond, &mtx);
    }
    /* some operations */
    pthread_mutex_unlock(&mtx);